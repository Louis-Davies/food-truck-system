package seng202.team1.gui;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import seng202.team1.model.FoodItem;
import seng202.team1.model.Recipe;
import seng202.team1.util.RecipeBuilder;

import java.io.IOException;

/**
 * controller for the edit recipe panel in the edit food item screen.
 */
public class RecipeView extends VBox {

    @FXML
    private VBox ingredientsVBox;

    @FXML private Button addSelected;

    @FXML private Label addItemErrorMsg;

    private FoodItemStorageController parent;
    private RecipeBuilder model;

    public RecipeView() {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("recipeDisplay.fxml"));
        loader.setRoot(this);
        loader.setController(this);

        try {
            loader.load();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public void initialize() {
        resetView();
        ingredientsVBox.getChildren().add(new Label("no item selected."));
    }

    /**
     * returns the RecipeBuilder this component is modelling.
     * @return the RecipeBuilder
     */
    public RecipeBuilder getModel() {
        return this.model;
    }

    /**
     * resets the RecipeView.
     */
    public void resetView() {
        addSelected.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                addSelectedItemFromParent();
            }
        });

        resetIngredientList();
    }

    /**
     * sets the parent FoodItemStorageController.
     * @param parent the parent FoodItemStorageController
     */
    public void setParent(FoodItemStorageController parent) {
        this.parent = parent;
    }

    /**
     * updates the RecipeView to model a different Recipe's information.
     * @param modelRecipe the Recipe to create a RecipeBuilder from
     */
    public void updateModel(Recipe modelRecipe) {

        resetView();
        model = new RecipeBuilder();
        model.loadExistingRecipeData(modelRecipe);

        if (model == null) {
            ingredientsVBox.getChildren().add(new Label("no recipe for this item."));
        } else {
            refreshIngredientList();
        }
    }

    /**
     * refreshes the list of ingredients shown in the RecipeView based on the ingredients in the model RecipeBuilder.
     */
    private void refreshIngredientList() {
        resetIngredientList();
        for (FoodItem ingredient : model.getIngredients()) {
            String name = ingredient.getName();
            int amount = model.getIngredientAmounts().get(ingredient.getCode());
            ingredientsVBox.getChildren().add(new RecipeIngredientDisplay(this, ingredient));
        }
    }

    /**
     * returns the recipe generated by the RecipeBuilder.
     * @return the Recipe with the desired information or null if the ingredients are invalid
     */
    public Recipe getRecipe() {
        return model.generateRecipe(1);
    }

    /**
     * adds the selected item in the parent FoodItemStorageController to the recipe.
     */
    public void addSelectedItemFromParent() {
        FoodItem candidate = parent.getSelectionAsFoodItem();
        if (candidate == null) {
            addItemErrorMsg.setText("no item selected.");
        } else {
            try {
                model.addIngredient(candidate, 1);
                refreshIngredientList();
            } catch (IllegalArgumentException e) {
                parent.setStatusText(e.getMessage(), true);
            }
        }
    }

    /**
     * resets the list of displayed ingredients.
     */
    private void resetIngredientList() {
        ingredientsVBox.getChildren().clear();
    }

    /**
     * remove one ingredient from the set of ingredients. deletes the ingredient if decrementing from 1.
     * @param ingredientCode the code of the ingredient to remove one of
     */
    protected void removeOneIngredient(String ingredientCode) {
        Integer currentAmount = model.getIngredientAmounts().get(ingredientCode);
        if (currentAmount == null) {
            throw new IllegalArgumentException("cannot remove an ingredient not in the recipe");
        }

        if (currentAmount <= 1) {
            model.removeIngredient(ingredientCode);
        } else {
            model.updateIngredientAmount(ingredientCode, currentAmount - 1);
        }
        refreshIngredientList();
    }

    /**
     * add one ingredient to the set of ingredients.
     * @param ingredientCode the code of the ingredient to add one of
     */
    protected void addOneOfIngredient(String ingredientCode) {
        Integer currentAmount = model.getIngredientAmounts().get(ingredientCode);
        if (currentAmount == null) {
            throw new IllegalArgumentException("cannot remove an ingredient not in the recipe");
        }
        model.updateIngredientAmount(ingredientCode, currentAmount + 1);
        refreshIngredientList();
    }

}
